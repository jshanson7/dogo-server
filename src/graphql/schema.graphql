input AddUserInput {
  first_name: String!
  last_name: String!
  clientMutationId: String!
}

type AddUserPayload {
  user: User
  clientMutationId: String!
}

type App implements Node {
  id: ID!
  users(after: String, first: Int, before: String, last: Int): UserConnection
  shelters(after: String, first: Int, before: String, last: Int): ShelterConnection
  dogs(after: String, first: Int, before: String, last: Int): DogConnection
}

type Dog implements Node {
  id: ID!
  name: String
}

type DogConnection {
  pageInfo: PageInfo!
  edges: [DogEdge]
}

type DogEdge {
  node: Dog
  cursor: String!
}

type Mutation {
  addUser(input: AddUserInput!): AddUserPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Root {
  node(id: ID!): Node
  app: App
}

type Shelter implements Node {
  id: ID!
  name: String
}

type ShelterConnection {
  pageInfo: PageInfo!
  edges: [ShelterEdge]
}

type ShelterEdge {
  node: Shelter
  cursor: String!
}

type User implements Node {
  id: ID!
  first_name: String
  last_name: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}
